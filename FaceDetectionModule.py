import cv2<br>import mediapipe as mp<br>import time<br><br><br>class FaceDetector():<br>    def __init__(self, minDetectionCon=0.5):<br><br>        self.minDetectionCon = minDetectionCon<br><br>        self.mpFaceDetection = mp.solutions.face_detection<br>        self.mpDraw = mp.solutions.drawing_utils<br>        self.faceDetection = self.mpFaceDetection.FaceDetection(self.minDetectionCon)<br><br>    def findFaces(self, img, draw=True):<br><br>        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)<br>        self.results = self.faceDetection.process(imgRGB)<br>        # print(self.results)<br>        bboxs = []<br>        if self.results.detections:<br>            for id, detection in enumerate(self.results.detections):<br>                bboxC = detection.location_data.relative_bounding_box<br>                ih, iw, ic = img.shape<br>                bbox = int(bboxC.xmin * iw), int(bboxC.ymin * ih), <br>                       int(bboxC.width * iw), int(bboxC.height * ih)<br>                bboxs.append([id, bbox, detection.score])<br>                if draw:<br>                    img = self.fancyDraw(img,bbox)<br><br>                    cv2.putText(img, f'{int(detection.score[0] * 100)}%',<br>                            (bbox[0], bbox[1] - 20), cv2.FONT_HERSHEY_PLAIN,<br>                            2, (255, 0, 255), 2)<br>        return img, bboxs<br><br>    def fancyDraw(self, img, bbox, l=30, t=5, rt= 1):<br>        x, y, w, h = bbox<br>        x1, y1 = x + w, y + h<br><br>        cv2.rectangle(img, bbox, (255, 0, 255), rt)<br>        # Top Left  x,y<br>        cv2.line(img, (x, y), (x + l, y), (255, 0, 255), t)<br>        cv2.line(img, (x, y), (x, y+l), (255, 0, 255), t)<br>        # Top Right  x1,y<br>        cv2.line(img, (x1, y), (x1 - l, y), (255, 0, 255), t)<br>        cv2.line(img, (x1, y), (x1, y+l), (255, 0, 255), t)<br>        # Bottom Left  x,y1<br>        cv2.line(img, (x, y1), (x + l, y1), (255, 0, 255), t)<br>        cv2.line(img, (x, y1), (x, y1 - l), (255, 0, 255), t)<br>        # Bottom Right  x1,y1<br>        cv2.line(img, (x1, y1), (x1 - l, y1), (255, 0, 255), t)<br>        cv2.line(img, (x1, y1), (x1, y1 - l), (255, 0, 255), t)<br>        return img<br><br><br>def main():<br>    cap = cv2.VideoCapture("Videos/6.mp4")<br>    pTime = 0<br>    detector = FaceDetector()<br>    while True:<br>        success, img = cap.read()<br>        img, bboxs = detector.findFaces(img)<br>        print(bboxs)<br><br>        cTime = time.time()<br>        fps = 1 / (cTime - pTime)<br>        pTime = cTime<br>        cv2.putText(img, f'FPS: {int(fps)}', (20, 70), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 2)<br>        cv2.imshow("Image", img)<br>        cv2.waitKey(1)<br><br><br>if __name__ == "__main__":<br>    main()
